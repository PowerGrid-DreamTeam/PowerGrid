import java.util.ArrayList;
import java.util.Arraylist;
import java.util.Collections;

public class GameManager extends Board{

////////////////////////////////////////////////////Game Setup
	private Board board;
	private ArrayList<Player>players;
	private MainBank Region;
	private ArrayList<Region>regions;
	private int round;
	//private ArrayList<PowerPlant>deck;
	
	public void startGame()
	{
		this.board = new Board();
		this.mainBank = new MainBank();
		this.setUpGame();
	}
	
	public void setUpGame()
	{
		// this.setUpBoard();
		// this.setResourceMarket();
		// this.setActualMarket();
		// this.setFutureMarket();
		// this.setUpPlayers();
	}
	
	public void setUpPlayers()
	{
		Player player1 = new Player();
		Player player2 = new Player();
		Player player3 = new Player();
		Player player4 = new Player();
		
		players.add(player1);
		players.add(player2);
		players.add(player3);
		players.add(player4);
		
		Collections.shuffle(players);
		
	}
	
	public void setUpBoard()
	{
		// set regions
		Region red = new Region("red");
		Region brown = new Region("brown");
		Region purple = new Region("purple");
		Region green = new Region("green");
		Region blue = new Region("blue");
		Region yellow = new Region("yellow");
		
		regions.add(red);
		regions.add(brown);
		regions.add(purple);
		regions.add(green);
		regions.add(blue);
		regions.add(yellow);
		
		board.addRegions(regions);
		
		// set pipelines
	}
	
	public void setResourceMarket()
	{
		// determine what round it is
		
		// set correct amount of resources
		if(round = 0;)
			MainBank.defaultResources();
	}
	
	public void setResourceSupply()
	{
		// adds resources not used in default
	}
	
	public void setActualMarket()
	{
		// set cards
		for(int x = 0; x < 8; x++)
		{
			//this.market.add(deck(x));
		}
			
	}
	
	public void setFuturemarket()
	{
		// add cards
	}

/////////////////////////////////////////////////////////////Game Begins
	
	public void AuctionPlants()
	{
		//Goes to each player to read their bid inputs
		//removes from ActualMarket sold plant
		//calls setActual and setFuture market classes to reset after sale
	}
	
	public void BuyResources()
	{
		//reads player inputs for resource and price
		//determines if player has enough elektro and whether the resources are for the correct plant
		//removes sold resource
		//calls setResourceSupply and setResourceMarket to reset after a sale
	}

}
